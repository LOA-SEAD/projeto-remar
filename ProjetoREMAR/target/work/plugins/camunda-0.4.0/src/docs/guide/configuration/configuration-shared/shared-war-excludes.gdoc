When needing to prepare a war for a 'shared' process engine scenario, one needs to be aware that

1. the 'org.camunda.bpm:camunda-engine' dependencies are provided by the container
1. the 'org.codehaus.groovy:groovy-all' library is provided by the container

One therefore will need to configure the project dependencies in BuildConfig.groovy in a way which 
makes sure that those dependencies are not included in such a war (scope: 'provided'). At the same 
time, one might face the issue, that one needs those dependencies included in another war which is 
meant to work with an embedded engine (e.g. when excuting 'grails run-war'). As of Grails 2.3.x, 
environments can be safely used in BuildConfig.groovy. One can therefore configure something along 
the following lines:

{code:groovy}
environments {
  production {
    provided ("org.camunda.bpm:camunda-engine:$camundaVersion") {
      excludes 'spring-beans'
    }
  }
}
{code}

However, in order to provide an improved 'out of the box' experience for new camunda Grails Plugin
users as well as provide some finetuning possibilities for advanced users, the plugin provides 
two configuration options with which the 'WEB-INF/lib' folder of a war prepared for a 'shared' engine 
scenario (and only for those scenarios) can be manipulated after having been filled with all the 
configured jars. Those properties are set to defaults which make sure that you can directly deploy
to shared engine containers just as easy as you deploy for embedded engine scenarios. In Config.groovy 
you can use

{code:groovy}
  camunda.deployment.shared.war.excludes = ['camunda-*.jar', 'groovy-all-*.jar']
camunda.deployment.shared.war.includes = ['camunda-engine-spring-*.jar']
{code}

With the 'includes' setting you can make an exception to the 'excludes' setting. The example given shows 
the defaults used by the plugin. In case you configure all the camunda dependencies for all your 
environments yourself in a more proper way with 'provided' scopes as shown above, you should override 
the defaults of those two values and set them to null. Then the plugin won't interfere with your
'shared' engine war generation any longer.
