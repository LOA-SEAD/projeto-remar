package ${packageName}

import grails.gorm.DetachedCriteria
import groovy.transform.ToString

import org.apache.commons.lang.builder.HashCodeBuilder

@ToString(cache=true, includeNames=true, includePackage=false)
class ${userClassName}${roleClassName} implements Serializable {

	private static final long serialVersionUID = 1

	${userClassName} ${userClassProperty}
	${roleClassName} ${roleClassProperty}

	${userClassName}${roleClassName}(${userClassName} u, ${roleClassName} r) {
		this()
		${userClassProperty} = u
		${roleClassProperty} = r
	}

	@Override
	boolean equals(other) {
		if (!(other instanceof ${userClassName}${roleClassName})) {
			return false
		}

		other.${userClassProperty}?.id == ${userClassProperty}?.id && other.${roleClassProperty}?.id == ${roleClassProperty}?.id
	}

	@Override
	int hashCode() {
		def builder = new HashCodeBuilder()
		if (${userClassProperty}) builder.append(${userClassProperty}.id)
		if (${roleClassProperty}) builder.append(${roleClassProperty}.id)
		builder.toHashCode()
	}

	static ${userClassName}${roleClassName} get(long ${userClassProperty}Id, long ${roleClassProperty}Id) {
		criteriaFor(${userClassProperty}Id, ${roleClassProperty}Id).get()
	}

	static boolean exists(long ${userClassProperty}Id, long ${roleClassProperty}Id) {
		criteriaFor(${userClassProperty}Id, ${roleClassProperty}Id).count()
	}

	private static DetachedCriteria criteriaFor(long ${userClassProperty}Id, long ${roleClassProperty}Id) {
		${userClassName}${roleClassName}.where {
			${userClassProperty} == ${userClassName}.load(${userClassProperty}Id) &&
			${roleClassProperty} == ${roleClassName}.load(${roleClassProperty}Id)
		}
	}

	static ${userClassName}${roleClassName} create(${userClassName} ${userClassProperty}, ${roleClassName} ${roleClassProperty}, boolean flush = false) {
		def instance = new ${userClassName}${roleClassName}(${userClassProperty}, ${roleClassProperty})
		instance.save(flush: flush, insert: true)
		instance
	}

	static boolean remove(${userClassName} u, ${roleClassName} r, boolean flush = false) {
		if (u == null || r == null) return false

		int rowCount = ${userClassName}${roleClassName}.where { ${userClassProperty} == u && ${roleClassProperty} == r }.deleteAll()

		if (flush) { ${userClassName}${roleClassName}.withSession { it.flush() } }

		rowCount
	}

	static void removeAll(${userClassName} u, boolean flush = false) {
		if (u == null) return

		${userClassName}${roleClassName}.where { ${userClassProperty} == u }.deleteAll()

		if (flush) { ${userClassName}${roleClassName}.withSession { it.flush() } }
	}

	static void removeAll(${roleClassName} r, boolean flush = false) {
		if (r == null) return

		${userClassName}${roleClassName}.where { ${roleClassProperty} == r }.deleteAll()

		if (flush) { ${userClassName}${roleClassName}.withSession { it.flush() } }
	}

	static constraints = {
		${roleClassProperty} validator: { ${roleClassName} r, ${userClassName}${roleClassName} ur ->
			if (ur.${userClassProperty} == null || ur.${userClassProperty}.id == null) return
			boolean existing = false
			${userClassName}${roleClassName}.withNewSession {
				existing = ${userClassName}${roleClassName}.exists(ur.${userClassProperty}.id, r.id)
			}
			if (existing) {
				return 'userRole.exists'
			}
		}
	}

	static mapping = {
		id composite: ['${userClassProperty}', '${roleClassProperty}']
		version false
	}
}
