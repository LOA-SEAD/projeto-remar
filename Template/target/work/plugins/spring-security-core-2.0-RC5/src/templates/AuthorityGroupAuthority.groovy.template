package ${packageName}

import grails.gorm.DetachedCriteria
import groovy.transform.ToString

import org.apache.commons.lang.builder.HashCodeBuilder

@ToString(cache=true, includeNames=true, includePackage=false)
class ${groupClassName}${roleClassName} implements Serializable {

	private static final long serialVersionUID = 1

	${groupClassName} ${groupClassProperty}
	${roleClassName} ${roleClassProperty}

	${groupClassName}${roleClassName}(${groupClassName} g, ${roleClassName} r) {
		this()
		${groupClassProperty} = g
		${roleClassProperty} = r
	}

	@Override
	boolean equals(other) {
		if (!(other instanceof ${groupClassName}${roleClassName})) {
			return false
		}

		other.${roleClassProperty}?.id == ${roleClassProperty}?.id && other.${groupClassProperty}?.id == ${groupClassProperty}?.id
	}

	@Override
	int hashCode() {
		def builder = new HashCodeBuilder()
		if (${groupClassProperty}) builder.append(${groupClassProperty}.id)
		if (${roleClassProperty}) builder.append(${roleClassProperty}.id)
		builder.toHashCode()
	}

	static ${groupClassName}${roleClassName} get(long ${groupClassProperty}Id, long ${roleClassProperty}Id) {
		criteriaFor(${groupClassProperty}Id, ${roleClassProperty}Id).get()
	}

	static boolean exists(long ${groupClassProperty}Id, long ${roleClassProperty}Id) {
		criteriaFor(${groupClassProperty}Id, ${roleClassProperty}Id).count()
	}

	private static DetachedCriteria criteriaFor(long ${groupClassProperty}Id, long ${roleClassProperty}Id) {
		${groupClassName}${roleClassName}.where {
			${groupClassProperty} == ${groupClassName}.load(${groupClassProperty}Id) &&
			${roleClassProperty} == ${roleClassName}.load(${roleClassProperty}Id)
		}
	}

	static ${groupClassName}${roleClassName} create(${groupClassName} ${groupClassProperty}, ${roleClassName} ${roleClassProperty}, boolean flush = false) {
		def instance = new ${groupClassName}${roleClassName}(${groupClassProperty}, ${roleClassProperty})
		instance.save(flush: flush, insert: true)
		instance
	}

	static boolean remove(${groupClassName} rg, ${roleClassName} r, boolean flush = false) {
		if (rg == null || r == null) return false

		int rowCount = ${groupClassName}${roleClassName}.where { ${groupClassProperty} == rg && ${roleClassProperty} == r }.deleteAll()

		if (flush) { ${groupClassName}${roleClassName}.withSession { it.flush() } }

		rowCount
	}

	static void removeAll(${roleClassName} r, boolean flush = false) {
		if (r == null) return

		${groupClassName}${roleClassName}.where { ${roleClassProperty} == r }.deleteAll()

		if (flush) { ${groupClassName}${roleClassName}.withSession { it.flush() } }
	}

	static void removeAll(${groupClassName} rg, boolean flush = false) {
		if (rg == null) return

		${groupClassName}${roleClassName}.where { ${groupClassProperty} == rg }.deleteAll()

		if (flush) { ${groupClassName}${roleClassName}.withSession { it.flush() } }
	}

	static constraints = {
		${roleClassProperty} validator: { ${roleClassName} r, ${groupClassName}${roleClassName} rg ->
			if (rg.${groupClassProperty} == null || rg.${groupClassProperty}.id == null) return
			boolean existing = false
			${groupClassName}${roleClassName}.withNewSession {
				existing = ${groupClassName}${roleClassName}.exists(rg.${groupClassProperty}.id, r.id)
			}
			if (existing) {
				return 'roleGroup.exists'
			}
		}
	}

	static mapping = {
		id composite: ['${groupClassProperty}', '${roleClassProperty}']
		version false
	}
}
