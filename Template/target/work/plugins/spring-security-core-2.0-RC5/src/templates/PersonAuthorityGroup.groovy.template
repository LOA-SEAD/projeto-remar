package ${packageName}

import grails.gorm.DetachedCriteria
import groovy.transform.ToString

import org.apache.commons.lang.builder.HashCodeBuilder

@ToString(cache=true, includeNames=true, includePackage=false)
class ${userClassName}${groupClassName} implements Serializable {

	private static final long serialVersionUID = 1

	${userClassName} ${userClassProperty}
	${groupClassName} ${groupClassProperty}

	${userClassName}${groupClassName}(${userClassName} u, ${groupClassName} rg) {
		this()
		${userClassProperty} = u
		${groupClassProperty} = rg
	}

	@Override
	boolean equals(other) {
		if (!(other instanceof ${userClassName}${groupClassName})) {
			return false
		}

		other.${userClassProperty}?.id == ${userClassProperty}?.id && other.${groupClassProperty}?.id == ${groupClassProperty}?.id
	}

	@Override
	int hashCode() {
		def builder = new HashCodeBuilder()
		if (${userClassProperty}) builder.append(${userClassProperty}.id)
		if (${groupClassProperty}) builder.append(${groupClassProperty}.id)
		builder.toHashCode()
	}

	static ${userClassName}${groupClassName} get(long ${userClassProperty}Id, long ${groupClassProperty}Id) {
		criteriaFor(${userClassProperty}Id, ${groupClassProperty}Id).get()
	}

	static boolean exists(long ${userClassProperty}Id, long ${groupClassProperty}Id) {
		criteriaFor(${userClassProperty}Id, ${groupClassProperty}Id).count()
	}

	private static DetachedCriteria criteriaFor(long ${userClassProperty}Id, long ${groupClassProperty}Id) {
		${userClassName}${groupClassName}.where {
			${userClassProperty} == ${userClassName}.load(${userClassProperty}Id) &&
			${groupClassProperty} == ${groupClassName}.load(${groupClassProperty}Id)
		}
	}

	static ${userClassName}${groupClassName} create(${userClassName} ${userClassProperty}, ${groupClassName} ${groupClassProperty}, boolean flush = false) {
		def instance = new ${userClassName}${groupClassName}(${userClassProperty}, ${groupClassProperty})
		instance.save(flush: flush, insert: true)
		instance
	}

	static boolean remove(${userClassName} u, ${groupClassName} rg, boolean flush = false) {
		if (u == null || rg == null) return false

		int rowCount = ${userClassName}${groupClassName}.where { ${userClassProperty} == u && ${groupClassProperty} == rg }.deleteAll()

		if (flush) { ${userClassName}${groupClassName}.withSession { it.flush() } }

		rowCount
	}

	static void removeAll(${userClassName} u, boolean flush = false) {
		if (u == null) return

		${userClassName}${groupClassName}.where { ${userClassProperty} == u }.deleteAll()

		if (flush) { ${userClassName}${groupClassName}.withSession { it.flush() } }
	}

	static void removeAll(${groupClassName} rg, boolean flush = false) {
		if (rg == null) return

		${userClassName}${groupClassName}.where { ${groupClassProperty} == rg }.deleteAll()

		if (flush) { ${userClassName}${groupClassName}.withSession { it.flush() } }
	}

	static constraints = {
		${userClassProperty} validator: { ${userClassName} u, ${userClassName}${groupClassName} ug ->
			if (ug.${groupClassProperty} == null || ug.${groupClassProperty}.id == null) return
			boolean existing = false
			${userClassName}${groupClassName}.withNewSession {
				existing = ${userClassName}${groupClassName}.exists(u.id, ug.${groupClassProperty}.id)
			}
			if (existing) {
				return 'userGroup.exists'
			}
		}
	}

	static mapping = {
		id composite: ['${groupClassProperty}', '${userClassProperty}']
		version false
	}
}
