(1) Download a [camunda BPM Tomcat distribution|http://camunda.org/download/]. Make 
sure that the version of your camunda BPM container matches the version you use in 
your grails application. If necessary [change the camunda BPM version|guide:alternative-engine-version] 
used by the grails application.
 
(2) Make sure you declared the shared engine for those grails environments with which 
you prepare your container deployment war, e.g. 'production':

{code:groovy}
environments {
    production {
        camunda.deployment.scenario = "shared"
    }
}
{code}

(3) camunda BPM comes bundled with a dependency to the '*org.codehaus.groovy:groovy-all*' library,
which causes failure when deploying groovy/grails based applications bundled with their own version
of that library. Therefore the plugin prevents the bundling of the 'org.codehaus.groovy:groovy-all' 
library bundled with grails and instead assumes that this library is already provided by the container. 
When preparing the camunda BPM container for a production environment, you should check that the 
'org.codehaus.groovy:groovy-all' library version bundled in the container matches the version you 
need for your grails application and eventually replace it with the version you need.

{note}
You might want to check how to [configure and finetune the dependencies|guide:shared-war-excludes] 
provided by a camunda BPM container for a shared engine in greater detail.
{note}

*Finally*, build your 'war' file ...

{code:bash}
grails war
{code}

...and deploy it to your camunda BPM containers 'webapp' folder. Open 
[http://localhost:8080/camunda-welcome|http://localhost:8080/camunda-welcome] and browse to camunda 
cockpit or tasklist application.
