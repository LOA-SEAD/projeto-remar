You can easily use the process engine internally in your application. Just inject 
the camunda process engine API services into your grails artifacts (like
controllers, services, etc). The following services can be found in the package
[org.camunda.bpm.engine|http://docs.camunda.org/latest/api-references/javadoc/org/camunda/bpm/engine/package-summary.html]
and are made available under their 'bean style' class names, as shown here in alphabetical order:

{code}
import org.camunda.bpm.engine.*
... 
AuthorizationService authorizationService
FormService formService
HistoryService historyService
IdentityService identityService
ManagementService managementService
RepositoryService repositoryService
RuntimeService runtimeService
TaskService taskService
{code}

{note} Note that many of these bean names are quite generic (like 'taskService', 'managementService' etc) and
could easily clash with names you want to use in your application for other purposes - even more so when having in
mind the Grails naming convention to use *\*Service* as a name pattern for Grails services. On the other hand
typical camunda users are used to the service names shown above and will expect to use these services via their
established names. Therefore the plugin provides these services via those names shown above. However, in order to
avoid potential name conflicts with grails services pre-existing in your project, the plugin also allows to
*change these default bean names* via [configuration|guide:bean-names]. {note}

In addition to the camunda API services, the ProcessEngine itself can be used as an injectable
dependency, too:

{code}
import org.camunda.bpm.engine.*
... 
ProcessEngine processEngine
{code}

As an alternative to building your custom 'full fledged' grails application, you might 
want to use *[camunda tasklist|http://docs.camunda.org/latest/guides/user-guide/#tasklist]* 
to work yourself through your processes. In that case you will want to create 
some forms which can be presented to your camunda BPM tasklist user.